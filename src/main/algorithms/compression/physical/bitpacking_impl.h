/**
 * @file bitpacking_impl.h
 * @brief Brief description
 * @author Johannes Pietrzyk
 * @todo TODOS?
 */

#ifndef GENERAL_BITPACKING_IMPL_H
#define GENERAL_BITPACKING_IMPL_H

#ifdef GENERAL_BITPACKING_H


template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 1 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 2 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 3 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 4 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 5 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 6 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 7 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 8 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 16
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 9 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 10 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 11 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 12 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 13 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 14 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 15 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 16 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #17 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #18 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #19 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #20 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #21 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #22 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #23 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #24 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #25 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #26 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #27 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #28 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #29 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #30 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #31 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #32 of 32
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 17 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 18 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 19 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 20 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 21 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 22 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 23 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 24 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 16
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 25 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 26 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 27 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 28 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 29 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 5 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 5 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 30 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 31 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 5 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 3 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 2 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 5 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 3 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 2 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint32_t >::pack< 32 >( uint32_t * const data_in, uint32_t * result ) noexcept {
   uint32_t * const result_start_ptr = const_cast< uint32_t * const >( result );
   uint32_t * data = const_cast< uint32_t * >( data_in );
   uint32_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint32_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #17 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #18 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #19 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #20 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #21 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #22 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #23 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #24 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #25 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #26 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #27 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #28 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #29 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #30 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #31 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #32 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #33 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #34 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #35 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #36 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #37 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #38 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #39 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #40 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #41 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #42 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #43 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #44 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #45 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #46 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #47 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #48 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #49 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #50 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #51 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #52 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #53 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #54 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #55 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #56 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #57 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #58 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #59 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #60 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #61 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #62 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #63 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #64 of 64
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 1 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 57 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 59 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 61 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 62 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 63 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 2 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 62 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 62 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 3 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 57 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 59 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 61 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 4 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 5 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 57 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 59 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 6 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 7 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 57 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 8 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 9 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 10 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 11 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 12 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 13 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 14 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 15 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 16 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 16
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 17 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 18 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 19 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 20 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 21 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 22 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 23 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 24 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 25 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 26 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 27 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 28 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 29 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 30 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 31 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 32 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #17 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #18 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #19 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #20 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #21 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #22 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #23 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #24 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #25 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #26 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #27 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #28 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #29 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #30 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #31 of 32
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #32 of 32
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 33 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 34 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 35 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 36 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 37 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 38 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 39 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 40 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 41 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 42 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 43 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 44 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 45 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 46 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 47 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 48 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 16
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 16
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 49 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 50 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 51 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 52 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 53 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 54 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 55 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 56 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 8
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 8
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 57 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 58 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 59 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 57 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 60 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 4
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 4
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 61 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 57 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 5 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 59 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] |= ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 62 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 2
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 2
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 63 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 63 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 62 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 2 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 61 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 3 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 60 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 4 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 59 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 5 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 58 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 6 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 57 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 7 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 56 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 8 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 55 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 9 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 54 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 10 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 53 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 11 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 52 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 12 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 51 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 13 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 50 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 14 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 49 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 15 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 48 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 16 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 47 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 17 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 46 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 18 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 45 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 19 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 44 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 20 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 43 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 21 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 42 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 22 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 41 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 23 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 40 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 24 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 39 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 25 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 38 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 26 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 37 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 27 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 36 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 28 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 35 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 29 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 34 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 30 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 33 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 31 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 32 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 32 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 31 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 33 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 30 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 34 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 29 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 35 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 28 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 36 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 27 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 37 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 26 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 38 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 25 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 39 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 24 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 40 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 23 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 41 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 22 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 42 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 21 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 43 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 20 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 44 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 19 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 45 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 18 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 46 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 17 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 47 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 16 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 48 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 15 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 49 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 14 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 50 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 13 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 51 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 12 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 52 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 11 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 53 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 10 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 54 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 9 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 55 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 8 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 56 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 7 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 57 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 6 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 58 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 5 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 59 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 4 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 60 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 3 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 61 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      tmp_vector[ chunk_inner_pos ] = data[ chunk_inner_pos ];
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( tmp_vector[ chunk_inner_pos ] << 2 );
      result_vector[ chunk_inner_pos ] = (tmp_vector[ chunk_inner_pos ] >> 62 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = result_vector[ chunk_inner_pos ] | ( data[ chunk_inner_pos ] << 1 );
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 1
   return (size_t) (result - result_start_ptr);
}
template< > template< >
size_t vertical_bitpacking< uint64_t >::pack< 64 >( uint64_t * const data_in, uint64_t * result ) noexcept {
   uint64_t * const result_start_ptr = const_cast< uint64_t * const >( result );
   uint64_t * data = const_cast< uint64_t * >( data_in );
   uint64_t result_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t tmp_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   uint64_t current_vector[ VE_CORE_VPU_VR_ELEMENT_COUNT ];
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #1 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #2 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #3 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #4 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #5 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #6 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #7 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #8 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #9 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #10 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #11 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #12 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #13 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #14 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #15 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #16 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #17 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #18 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #19 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #20 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #21 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #22 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #23 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #24 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #25 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #26 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #27 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #28 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #29 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #30 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #31 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #32 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #33 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #34 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #35 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #36 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #37 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #38 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #39 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #40 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #41 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #42 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #43 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #44 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #45 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #46 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #47 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #48 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #49 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #50 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #51 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #52 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #53 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #54 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #55 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #56 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #57 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #58 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #59 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #60 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #61 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #62 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #63 of 64
   for ( size_t chunk_inner_pos = 0; chunk_inner_pos < VE_CORE_VPU_VR_ELEMENT_COUNT; ++chunk_inner_pos ) {
      result[ chunk_inner_pos ] = data[ chunk_inner_pos ];
   }
   data += VE_CORE_VPU_VR_ELEMENT_COUNT;
   result += VE_CORE_VPU_VR_ELEMENT_COUNT;
   //Finished Batch #64 of 64
   return (size_t) (result - result_start_ptr);
}

#endif
#endif //GENERAL_BITPACKING_IMPL_H